name: Visual Test
run-name: ${{ format('Visual Test{0}{1}', (github.event.inputs.vscode_revision && github.event.inputs.vscode_revision != 'main') && format(' with VSCode {0}', github.event.inputs.vscode_revision) || '', github.event.action == 'workflow_dispatch' && '' || format(' - {0}', github.event.head_commit.message)) }}
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      vscode_revision:
        description: 'The VSCode revision to test against'
        type: string
        default: 'main'
        required: false
jobs:
  test:
    runs-on: macos-12
    timeout-minutes: 60
    defaults:
      run:
        working-directory: ./test
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Prepare Font
      run: |
        cd ~
        mkdir -p ~/.ssh
        echo "${{ vars.INPUT_FONT_DEPLOY_KEY }}" > ~/.ssh/input_font_deploy_key
        chmod 600 ~/.ssh/input_font_deploy_key
        GIT_SSH_COMMAND='ssh -i ~/.ssh/input_font_deploy_key -o IdentitiesOnly=yes' git clone --depth 1 "${{ vars.INPUT_FONT_GIT_REPO }}" Input-Font
        mkdir -p /Library/Fonts
        # Note that copying fonts to ~/Library/Fonts/ will not work
        cp -r ~/Input-Font/Input_Fonts /Library/Fonts/
    - name: Package the Extension
      run: |
        cd ..
        npx vsce package --out spacegray-input-vscode.vsix
    - name: Install Test Dependencies
      run: npm ci
    - name: Clone VSCode
      run: git clone --depth 10 https://github.com/microsoft/vscode.git vscode
    - name: Checkout VSCode Revision
      run: |
        cd vscode
        git fetch --depth 10 origin ${{ github.event.inputs.vscode_revision }}
        git checkout ${{ github.event.inputs.vscode_revision }}
        cd ..
        # Checkout a branch if vscode_revision is not main
        if [ -n "${{ github.event.inputs.vscode_revision }}" ] && [ "${{ github.event.inputs.vscode_revision }}" != "main" ]; then
          git checkout -b "$(git branch --show-current)-with-vscode-${{ github.event.inputs.vscode_revision }}"
        fi
    - name: Get VSCode Version
      id: get-vscode-commit-version
      run: |
        cd vscode
        echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      shell: bash
    - name: Cache Built VSCode
      uses: actions/cache@v3
      env:
        cache-name: built-vscode
      with:
        path: |
          test/vscode/out
          test/vscode/extensions
          test/vscode/.build
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ steps.get-vscode-commit-version.outputs.commit_hash }}
    - name: Cache node_modules
      uses: actions/cache@v3
      env:
        cache-name: node_modules
      with:
        path: |
          **/node_modules
        key: ${{ runner.os }}-${{ env.cache-name }}-vscode-${{ hashFiles('test/vscode/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-
    - name: Build VSCode
      run: |
        cd vscode
        if [ ! -d "./out" ] || [ ! -d "./extensions" ] || [ ! -d "./.build" ] || [ ! -d "./node_modules" ]; then
          yarn && yarn compile
        else
          echo "./out ... directories already exist, skipping the build step."
        fi
    - name: Install Extension
      run: |
        cd vscode
        ./scripts/code-cli.sh --install-extension ../../spacegray-input-vscode.vsix
    - name: Set VSCode Settings
      run: mkdir -p ~/Library/Application\ Support/code-oss-dev/User && cp -f ./vscode-settings.json ~/Library/Application\ Support/code-oss-dev/User/settings.json
    - name: Run Visual Tests
      run: npm test -- tests/visual-test.spec.ts
      # uses: nick-fields/retry@v2
      # with:
      #   max_attempts: 5
      #   timeout_minutes: 60
      #   retry_wait_seconds: 8
      #   command: cd test && npm test
    - name: Upload Screenshots to Percy
      run: |
        # Scale down the screenshots to 75% of the original size to avoid the 2000px width limit of Percy
        mkdir -p screenshots-for-percy
        for img in "screenshots"/*.png; do
          filename=$(basename "$img")
          convert "$img" -resize 75% "screenshots-for-percy/$filename"
        done
        npm install -g @percy/cli
        PERCY_TOKEN=${{ vars.PERCY_TOKEN }} percy upload screenshots-for-percy/
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: screenshots
        path: test/screenshots/
        retention-days: 90
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: detailed-screenshots
        path: test/detailed-screenshots/
        retention-days: 90
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: test/playwright-report/
        retention-days: 30
